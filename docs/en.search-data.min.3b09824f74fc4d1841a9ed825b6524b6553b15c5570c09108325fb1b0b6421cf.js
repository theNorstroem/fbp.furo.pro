'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/installation/','title':"Installlation",'section':"Docs",'content':"Installation #  You can use furo FBP directly in your HTML documents or within your own web-components.\nFBP and eclipsefuro-web in HTML without a installation #  You can use furo-fbp and the furo-web-components without a direct installation by using the precompiled variant of the furo web components.\nThis is the simplest way to get up and running.\n Read more about that here.\nInstall the npm module #  To work with lit or native web components you need the npm module @furo/fbp.\n1  npm i -S @furo/fbp   FBP with lit-element #  To use FBP with lit, just extend your class.\n1 2 3 4  class MyComponent extends FBP(LitElement) {  } window.customElements.define(\u0026#39;my-component\u0026#39;, MyComponent);   FBP with native web-components #  To use furo-fbp with native components, call this._appendFBP(this.shadowRoot); to enable fbp.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class MyComponent extends FBP(HTMLElement) { constructor() { super(); // Create a shadow root to the element.  this.attachShadow({mode: \u0026#39;open\u0026#39;}); this.shadowRoot.appendChild(template.content.cloneNode(true)); // Append FBP to my-component  this._appendFBP(this.shadowRoot);  } } window.customElements.define(\u0026#39;my-component\u0026#39;, MyComponent);   FBP with polymer #  To use FBP with polymer, just extend your class.\n1 2 3 4  class MyComponent extends FBP(PolymerElement) {  } window.customElements.define(\u0026#39;my-component\u0026#39;, MyComponent);   "});index.add({'id':1,'href':'/docs/precompiled/','title':"Precompiled",'section':"Docs",'content':"@furo/precompiled #  The @furo/precompiled package is for those who want to use the furo componetnt directly in HTML. There is no build step needed. It is a convenient way to use the components to prototype some ideas or just play around with FBP without a complex installation procedure. When you know that your ideas work, transfer them 1:1 to a web component, so others can install, use and extend them.\nLook at the sample folder in the repo to see an example of what is possible.\n Warning This package was created teach furo FBP and for creating our demo systems , so we can use and show our components in a HUGO generated page. Some of the files are very big at the moment, because they are not optimized for file size yet.\n Demo #  This documentation uses @furo/precompiled at any place wher you can see a demo/source/flow panel. All that was needed was to load the precompiled scripts via CDN.\n1 2  \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/input.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/doc-helper.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   Installation #  The version of this package represents the versioning of @furo/collection.\n Note Keep in mind that you can not mix CDN , NPM and self builded variants of the installation.\n CDN #  You can use the components by refering to them via the CDN. This is good when your project is public and your server is slower then the CDN.\n1 2 3 4 5 6  \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/config/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/furo-fbp.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/framework.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/layout.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.4.3/dist/app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   NPM #  When your clients are in a closed environment and can not reach the real internet, prefer this variant. All files are delivered from your servers.\n1  npm i -S @furo/precompiled   Build by your self and using /dist #  When you need some other components, which are not installable as precompiled versions. Or you want to add your own components or compositions, you can clone this repository and extend it by your own component, or the installed components.\nMake sure that they are referenced by collection.js via a file that represents your package. You can also add it as an entry point in the rollup.config.js.\nYou can copy the /dist folder to your project or make it available for your projects on some other way. Do this by pushing them to npm or by serving them via your CDN.\n This kind of installation is only one step away from a set up with open wc and working with web dev server, which do not need a build step during the development phase. Consider to switch to this variant if your project gains complexity.\n Usage #  To use the components you have to load the package where they reside in. You will notice, that some components have their own js file. This is because they are used from different packages and is needed to keep a clean dependeny tree. It is ok to load this components directly, when you do not need something other, or load the package where they reside. It has no side effect if load them twice. Your browser knows what it have to do.\n1 2 3 4 5 6  \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/config/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/node_modules/@furo/precompiled/dist/furo-fbp.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/node_modules/@furo/precompiled/dist/framework.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/node_modules/@furo/precompiled/dist/layout.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/node_modules/@furo/precompiled/dist/app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   The init file [optional] #  When you want to use the data components you have to install the specs that you have gerated with furo. This is a good place to do it. Maybe you want to set the locales or install your translations too.\nTo load the init.js from your page, do the following in your index.html.\n Load the init.js before you load the other packages. Because some of them are dependant to the settings you do in the init and some will switch to a default setup.\n [index.html]\n1 2 3  \u0026lt;!-- init is needed because we use data components --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;/config/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;dist/furo-fbp.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   [/config/init.js]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import { Init, i18n, Env } from \u0026#39;/dist/framework.js\u0026#39; import {Types,Services} from \u0026#34;./data_environment.js\u0026#34;; /** * Register resource bundle i18n */ import { Translations } from \u0026#39;./translations.js\u0026#39;; i18n.registerResBundle(Translations); /** * Register the types and services which was generated by furo */ Init.registerApiTypes(Types); Init.registerApiServices(Services); /** * register the API prefix based on the APPROOT. * This information is used for furo-deep-link and furo-reverse-deep-link to resolve the api address. * * We use /api here, because we do not have a dedicated host like api.xxx.com for the api services * @type {string} */ Env.api.prefix = `/api`; Init.applyCustomApiPrefixToServicesAndTypes(Env.api.prefix); /** * Translate static messages in SPEC */ let locale = \u0026#39;de_ch\u0026#39;; if (i18n.resbundle[Env.locale.toLowerCase().replace(\u0026#39;-\u0026#39;, \u0026#39;_\u0026#39;)]) { locale = Env.locale.toLowerCase().replace(\u0026#39;-\u0026#39;, \u0026#39;_\u0026#39;); } Init.translateStaticTypeMessages(locale);   Compatibility Table #   Package Structure #  The packages structured and named like the modules from components.furo.pro. This module contains some additional files like DOMFBP.js which is needed when you want the fbp features on \u0026lt;body\u0026gt;.\nAddtional files: #   fixed-tooltip-display.js Tooltip display for pages which scrolls the hole page. DOMFBP.js Append FPB to any dom node, even body light-bulb.js A nice example component used in the docs ui5DisplayRegistry.js A UI5 display registry for the dynamic type renderers. ui5Icons.js The complete iconset, because we can not expose them individually (sorry)  collection.js #  This file contains the full set of the precompiled package and is huge.\napp.js #  A collection of elements, that can be used to structure your app’s layout.\nElements #    furo-app-bar-top Toolbar to place on top  furo-app-drawer Application drawer  furo-card Material design card element  furo-loading-indicator-bar An ugly progress bar  furo-tooltip displays a tooltip  furo-tooltip-display helper component for tooltip  config.js #  Furo config components\nElements #    furo-config access config data  furo-config-loader load config files  data.js #  This package contains the furo data components.\nElements #    furo-api-fetch fetch data from network  furo-collection-agent interface component to handle collection requests  furo-custom-method interface component to handle custom methods  furo-data-object Typed data object, the heart of all furo-data related components  furo-deep-link Resolve deep links HATEOAS based on query params  furo-entity-agent interface component to handle entity requests  furo-rel-exists checks for a specific rel in links  furo-reverse-deep-link create query param object from HATEOAS  furo-sortby-container create query param object for sort \u0026hellip;  data-input.js #  This package contains the furo data input components. The @furo/data-input components are mostly wrappers around the @furo/input components with an API to simplify the work with @furo/data (something like two way data binding) to create Forms and interact with a REST API.\nElements #    furo-data-bool-icon Displays a icon/symbol for a boolean value  furo-data-checkbox-input binds to a furo data checkbox input element  furo-data-collection-dropdown bindable dropdown  furo-data-color-input Binds a entityObject field to a furo-color-input field  furo-data-date-input Bind a entityObject.field to a date input  furo-data-display Displays a data field  furo-data-file-input Binds a entityObject field to a furo-file-input field  furo-data-money-input Binds a entityObject field google.type.Money to a furo-number-input and currency dropdown fields  furo-data-number-input Bind a entityObject.field to a number input  furo-data-password-input Bind a entityObject.field to a password input  furo-data-property display and bind types of type any  furo-data-property-display helper for furo-data-property  furo-data-radio-buton-input furo data radio-button input element  furo-data-range-input Bind a entityObject.field to a range input  furo-data-reference-search autocomplete searcher for referenced types  furo-data-repeat automatic display of repeated fields  furo-data-search-input Bind a entityObject.field to a search input  furo-data-sign-pad Bind a entityObject.field to a sign-pad input  furo-data-text-input Bind a entityObject.field to a text input  furo-data-textarea-input Bind a entityObject.field to a textarea input  furo-data-time-input Bind a entityObject.field to a time input \u0026hellip;  data-ui.js #  UI elements for furo data\nElements #    furo-data-context-menu a context menu  furo-data-table type based data table  furo-data-table-toggle helper for furo-data-table  furo-data-hide-content hide content container with boolean fields  furo-type-renderer display component to render fields according of the type \u0026hellip;  data-util.js #  Utility components for data\nElements #    furo-append-object append data to object literals  doc-helper.js #  Utils for the documentation system.\nexperiments.js #  Experimental components. APIs and location of the elements itself can change.\nThis components does not have any tests.\n furo-capture-audio furo-capture-video furo-catalog furo-qr-scanner furo-speech-recognition  form.js #  This package contains the furo form components, which are helpers to make the creation of forms simpler.\nElements #    furo-button-bar automatic button bar  furo-collapsible-box collapsible box with head  furo-form form container  furo-form-layouter form auto layouter  furo-input-row DEPRECATED label slot layout \u0026hellip;  framework.js #  This package contains the furo \u0026ldquo;framework\u0026rdquo; classes.\nClasses #    Env stores your environment data furo.js Export bundle for all framework classes  i18n Base i18n class  iconset Icon set loader  Sys Set your locale  Init App init stuff  Theme Theming stuff  furo-fbp.js #  The core furo FBP packages and classes. Read more on fbp.furo.pro\nicon.js #  (Material Design)\nThis package supplies the icons used in the other components of furo.\nIf you want to create a iconset by your own, look at the examples in the repo.\nElements #    furo-icon displays an icon  input.js #  Input components for furo. With this components you can design your form or any other data input for your app.\nIf you look for input components with data binding, look at the @furo/data-input components. This are the components used there.\nElements #    furo-button a md button  furo-checkbox checkbox input box  furo-checkbox-input checkbox input element with label       furo-chip chips  furo-color-input color input element  furo-date-input date input element  furo-file-dialog file input element  furo-file-drop dropzone for files  furo-icon-button icon button element  furo-input-chip input chips  furo-number-input number input element       furo-password-input password input element  furo-radio-button radio input circle  furo-radio-button-input radio input with label  furo-range-input range slider  furo-search-input search input element  furo-select-input select input (dropdown)  furo-sign-pad draw or sign  furo-text-input text input element  furo-textarea-input textarea input element  furo-time-input time input element \u0026hellip;  layout.js #  Layout components. Sometimes it is hard to describe the elements with text. Just take a look at the demos and you will get the idea.\nElements #    furo-snackbar a snackbar  furo-empty-spacer fill the space in a furo-xxxx-flex  furo-horizontal-flex horizontal alignment  furo-panel content panel with predefined margins  furo-ripple add a ripple effect  furo-split-view splitted layout  furo-vertical-flex vertical alignment of stuff  furo-vertical-scroller vertical scroll \u0026hellip;  navigation.js #  Furo navigation components\nneeds a furo spec to work\nElements #    furo-panel-coordinator-tabs tab navigation for panel-coordinator  furo-panel-head dislay a navigationNode as title  furo-tree tree navigation menu  notification.js #  notification components for furo\nElements #    furo-snackbar a snackbar  furo-snackbar-display helper component to show a snackbar  furo-banner a banner  furo-banner-display helper component to show a banner \u0026hellip;  route.js #  Furo routing components\nElements #    furo-app-flow Application Flow =\u0026gt; routing  furo-app-flow-router Application Flow =\u0026gt; routing  furo-location url watcher  furo-pages Simple content switcher  furo-panel-coordinator Complex content switcher based on furo-tree  furo-qp-changer deep linking helper \u0026hellip;  timing.js #  Furo timing related components.\nElements #    furo-de-bounce event de bouncer  furo-interval-pulse trigger an event in intervals \u0026hellip;  util.js #  A collection of utility elements.\nElements #    furo-fetch-json fetch json data  furo-get-clipboard get clipboard content  furo-head-tail split an array  furo-key-filter keyboard event filter  furo-keydown keyboard event listener  furo-markdown renders markdown data  furo-navigation-pad keyboard navigation helper  furo-pretty-json pretty prints json data  furo-put-clipboard write content to clipboard \u0026hellip;  ui5.js #  Enterprise-flavored sugar on top of native APIs!\nCompliant to SAP Fiori design language. Rich feature set. Includes all enterprise standards, such as accessibility, i18n, theming, etc\n  https://sap.github.io/ui5-webcomponents/  https://github.com/SAP/ui5-webcomponents  What is inside #  For seamless integration into the Furo environment, we have slightly extended some UI5 components.\n All not listed components can be obtained directly from SAP\n Elements #    furo-ui5-data-text-input a text input component  furo-ui5-data-textarea-input a text area input component  furo-ui5-data-number-input a number input component  furo-ui5-data-password-input a password input component  furo-ui5-data-date-picker a date input component  furo-ui5-data-collection-dropdown a dropdown component  furo-ui5-data-checkbox-input a checkbox component  furo-ui5-data-radio-button a radio button component  furo-ui5-data-money-input a type money input component  furo-ui5-data-property a dynamic property component  furo-ui5-data-radio-button a radio button component  furo-ui5-data-reference-search a reference search component  furo-ui5-data-segmented-button a segmented button component  furo-ui5-data-toggle-button a toggle button component  furo-ui5-data-display a display field component  furo-ui5-button a simple button with convenience functions  furo-ui5-busyindicator component to signal that some operation is going on  furo-ui5-data-table component to display data in tabular form  Compositions #    furo-ui5-pagination a pagination bar  furo-ui5-data-text-input-labeled a labeled text input component  furo-ui5-data-textarea-input-labeled a labeled text area input component  furo-ui5-data-number-input-labeled a labeled number input component  furo-ui5-data-password-input-labeled a labeled password input component  furo-ui5-form-field-container a form field container  furo-ui5-data-radio-button-group a radio button group component  furo-ui5-radio-button-group a radio button group component  furo-ui5-notification-list a notification component  "});index.add({'id':2,'href':'/docs/fbp-basics/','title':"Getting Started",'section':"Docs",'content':"Getting Started #  Write your applications like you make the concept for your application. Normaly you draw a few components and some arrows to connect the components, to describe your intention. Why you don’t do the same to write your app or component? Use existing web-components and wire them to build up your application.\nFuro FBP 101 #  In furo-FBP you connect events from one component to methods of anohter component. If you get this simple concept, you have understand already 90% of the things you need to write a program.\nConnecting things #  We have a lightswitch furo-button and a light bulb light-bulb which we want to toggle when the switch is clicked.\nWhen the button fires a click event, the action will trigger the toggle method of the light-bulb because it is connected by the wire --lightSwitchClicked.\n     This doesnt look very impressive in the first moment. But as you can see, there is no scripting involved and there are no id\u0026rsquo;s assigned to the components.\nHint\n Click on demo to see the flow in action. Click on source to see the corresponding source. Click on flow to see the resulting flow of the source.   Multiple targets #  A wire can have as many targets as you want.\nSo the wire --lightSwitchClicked can trigger multiple targets if you want.\n        When you press the button, all elements which are connected to the wire will trigger the defined function. In this example the last light-bulb is not connected.\nName of the wire\nYou can name a wire with alphanumeric characters without a \u0026ldquo;space\u0026rdquo;.\nIt is a good practice to name the wire by the thing that happened like --saveClicked or by the values it will transport like --responseData. The dashes are not needed, but it makes the code easier to read too.\n Name of the wire\nSometimes people tend to name the wire by the target action that the wire will trigger (--saveData). THIS IS NOT a good idea and will result in unreadable flows.\nAssume that your team want to introduce some other features, like playing a animation.\n1 2 3 4 5  \u0026lt;!-- bad wire name--\u0026gt; \u0026lt;some-animation ƒ-play=\u0026#34;--saveData\u0026#34;\u0026gt;\u0026lt;/some-animation\u0026gt; \u0026lt;!-- good wire name --\u0026gt; \u0026lt;some-animation ƒ-play=\u0026#34;--saveClicked\u0026#34;\u0026gt;\u0026lt;/some-animation\u0026gt;     Multiple sources #  A wire is not limited as a point to point connection and can have multiple sources.\n      It doesn\u0026rsquo;t matter if you press the first or the second light switch. Both of them will trigger the wire--lightSwitchClicked, which will invoke the toggle method on the light-bulb.\nMultiple sources and targets #  A wire is not limited as a point to point connection and can have multiple sources and also have multiple targets.\n         If you look at the source of this example, it doesn\u0026rsquo;t look very complex, the resulting flow of this example is quite complex.\nTriggering multiple wires from one source event #  Sometimes you want to trigger multiple wires from one source event. You can do this by separating them with a comma. @-click=\u0026quot;--lightSwitchClicked, --blinkerClicked\u0026quot;\n         When you press the button, it will trigger the --lightSwitchClicked and the --blinkerClicked wire.\nReceiving multiple wires on a target #  You can receive from multiple wires by comma separating them.\n         *The light bulb on the top right will be triggered by the --lightSwitchClicked and --intervallPulse wire *\n"});index.add({'id':3,'href':'/docs/web-components/','title':"furo web",'section':"Docs",'content':"フロー Furo Web Components #  Furo Web Components provides an enterprise ready set of web components which play seamlessly with Furo. Based on web standards and future proved. Compliant with any technology of choice. With minimal footprint it includes all enterprise standards, i18n, theming and much more.\nThe furo web components are a wide set of components which covers everything you need to write a web application. They consume the same types which are defined with furo.\nPowered by lit Many of the world\u0026rsquo;s most forward-looking organizations are building with Lit. We too. Most of our components are using lit or elsewhere native web components.\n Programmable HTML Furo FBP is like programmable HTML, no deep javascript knowledge is needed to write an application. The flowbased programming paradigm results in less complex and more flexible code.   SAP UI5, Google Material or any other design system A set of input elements which will work with the furo data structure out of the box, are available for a wide set of types.\nOur ui5 components i.e. are just extending the excellent UI5 Web Components, the Enterprise-flavored sugar on top of native APIs!.\nIf this is not enough, it is no problem to write your own components, by using the data adapter.\n Data Integration The transparent data agents are responsible for the communication with the APIs and the adapters for the UI interaction.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph TD UI[UI elements]-- HTML ---agent[Data Agents] agent-- REST ---API   "});index.add({'id':4,'href':'/docs/fbp-wires-data/','title':"Wire Data",'section':"Docs",'content':"Data on wires #  Wires are not limited to triggering something, they also transport information.\nNote\nBy default the content of EVENT.detail is passed to the target. If an event does not have a detail property, the receiver will get a undefined.\n Passing useful data to target #       The color picker dispatches a value-changed event, with the color as payload.\nSend the complete event instead of event.detail #  You can put the complete event or any sub.property of the event on the wire by defining the details at the producer / triggerer.\nProducer (@-) #  You can define exactly what you want to put on the wire on the producing side.\n @-event=\u0026quot;\u0026ndash;wireName(*)\u0026quot; will send the complete event. @-event=\u0026quot;\u0026ndash;wireName(*.key)\u0026quot; will send the property key of the event.  Receiver (ƒ-) #  You can pass a subset of the data on a wire to a receiver.\n ƒ-doit=\u0026quot;\u0026ndash;wireName(*.title)\u0026quot; will call doit(wiredata.title)on the receiver. ƒ-doit=\u0026quot;\u0026ndash;wireName(*.page.2.title)\u0026quot; will call doit(wiredata.page[2].title) on the receiver with checks that index 2 and the sub property really exist.  Storing event data on a class member property (aka parking) #  Sometimes you want to store data for later usage. To store data from an event write the property that you want to update in a double bracket ((targetProperty)).\n @-value-changed=\u0026quot;((color1)) will update the component property color1 with the value of EVENT.detail.  Note\nKeep in mind that you will overwrite existing properties of your host. A name like shadowRoot can cause problems.\n     Look at the example below to see how you can use parked data\nSending host member properties with events #  To send parked data, write the property name in brackets after the wire.\n @-click=\u0026quot;\u0026ndash;newColor(color1)\u0026quot; will put the value of color1 on the wire --newColor instead of the detail value of the click event.        "});index.add({'id':5,'href':'/docs/fbp-wires-more/','title':"Compatibility",'section':"Docs",'content':"Working with suboptimal components #  Some components that you may want or have to use are not dispatching events or receiving data by methods. Therefore, furo FBP has some features to work with them too.\nSetting a member value #  To set a value of a component you use can be done with the ƒ-.property.\n A click counter   Note, a property is not an attribute.\nYou have to know what you do. This is a direct manipulation of a component and maybe there is some reason why it does not expose the property.\n Wireing responses from method calls #  When the method that you have wired only returns data that you want to use, you can wire the response with @-ƒ-methodname.\n calculate sqrt      The response of the calculate(n) method is avaliable on the wire --calculatedSqrRoot.\nSpread arguments #  When a receiver mehtod accepts multiple arguments or is a spread operator and the data on the wire is spreadable, furo FBP will handle this for you correctly.\n"});index.add({'id':6,'href':'/docs/fbp-events/','title':"Custom Events",'section':"Docs",'content':"Fireing custom events #  Web Components use events to communicate state changes up the DOM tree to parent elements.\nFuro also provides a notation for events which allows you to specify events in a declarative manner. This is very useful when you want to trigger a event with a more specific name then the originating event has.\n*On the first view, it does not make sense to rename events. Take a look at the example below to get a better understanding. controller-component\n play pause stop   my-player\n     Imagine a simple controller component with some buttons. Each of them will dispatch a simple click. Using @-click on the controller inside of the my-player can not distinguish which button was pressed.\n learn more about events\u0026hellip;\nNon bubbling events #  Non bubbling events will, as the name says, not bubble and stop at the next dom parent.\nTo fire a non-bubbling-event use ^event-name.\n Search    Bubbling events #  To fire a bubbling-event use ^^event-name. Bubbling is useful if you want or have to use the event in a parent component. It is a good practice to document the bubbling events from the child components.\n Search    the general-error event will bubble.\nNon bubbling host events #  With -^ you can dispatch an event, which is available on the host only, but does not bubble. This is useful when you want to mimic the blur event (which does not bubble) on the outside of your component.\nSending host data with events #  Sometimes you want to send some values with your event, when the default event.detail is not useful. You can send any host property with your event by giving the property name in brackets like ^^some-event(propertyName) .\nbubbling event with custom data\n1  \u0026lt;paper-button @-click=\u0026#34;^^some-event(_privateProperty)\u0026#34;\u0026gt; check \u0026lt;/paper-button\u0026gt;   The click event sends usually a number for the amount of clicks with a certain time distance. So it will send 1 for a click, 2 for a doubleClick, 3 for a trippleClick,\u0026hellip;\nSending multiple events from a single source #  You can also send multiple events from a single source.\n1  \u0026lt;paper-button @-click=\u0026#34;^^some-event(_privateProperty),^other-event,--checkTapped\u0026#34;\u0026gt; check \u0026lt;/paper-button\u0026gt;   When the button is tapped, some-event and other-event will be fired and the wire \u0026ndash;checkTapped will be triggered.\nStop propagation #  To stop the event propagation to parent elements, add a :STOP to the event wires @-error=\u0026quot;--errorOccured, :STOP\u0026quot;. The wires in this event-chain will be triggered. But the propagation will be stopped.\nPrevent Default #  Prevent default can be achieved by using :PREVENTDEFAULT.\n"});index.add({'id':7,'href':'/docs/fbp-scripting/','title':"Script interaction",'section':"Docs",'content':"Interaction with javascript #  The wires can be hooked and triggered from the script part of your component. This also comes very handy when you are writing tests.\nTrigger a wire imperatively #  To trigger a wire from the javascript part of your component or from a test, call the _FBPTriggerWire method. You can also trigger the wire in the constructor, then the wire will be queued until the flow is parsed and ready.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class TriggerSample extends FBP(LitElement) { constructor(){ super(); this.data = \u0026#34;Test\u0026#34;; // this wire will be queued  this._FBPTriggerWire(\u0026#34;--wireName\u0026#34;, this.data);  } /** * _FBPReady triggers when the flow is ready */ _FBPReady(){ super._FBPReady(); this._FBPTriggerWire(\u0026#39;--wireName\u0026#39;, this.data);  } /** * To pass data from outside to a wire, use this._FBPTriggerWire() * */ fetchRecord(src){ this._FBPTriggerWire(\u0026#39;--fetchRequested\u0026#39;, src);  } }   Add a wire hook #  To hook on a wire use this._FBPAddWireHook(\u0026quot;--wirename\u0026quot;). This comes very handy at testing, or if you have to manipulate some data, because the component doesnt send it like an other component needs it.\n1 2 3 4 5 6 7 8 9 10  class HookSample extends FBP(LitElement) { constructor() { super(); this._FBPAddWireHook(\u0026#34;--pathChanged\u0026#34;,(d)=\u0026gt;{ // d contains the full content of the event, not only the d.detail  })  } }    The most @-events of the furo base components will fit the ƒ-methods of the corresponding components. It is like playing domino. Read the api guide to learn what which component sends or expects.\n "});index.add({'id':8,'href':'/docs/fbp-bestpractice/','title':"Best Practice",'section':"Docs",'content':"Best Practice #  The best practices are a result from the feedback of our users, thanks to them.\nFeel free to give us your feedback.\nWire and event naming #  In fact you can use any string to name wires, but most of the users are using two dashes in front of the wire name and for the name they use camelCase notation.\nFor the events they use the dashed-case notation, because you can not write @-camelCase.\n1  \u0026lt;furo-button @-click=\u0026#34;--buttonClicked, ^^fired-event\u0026#34;\u0026gt;\u0026lt;/furo-button\u0026gt;   With this notation they can see the difference between a \u0026ndash;wire to an event they fire directly.\nUse declarative wire names, don\u0026rsquo;t be imperative #  When you use declarative names, it would be easier to read and modify a wired program.\nbad example\n1 2 3  \u0026lt;furo-button @-click=\u0026#34;--closeView\u0026#34;\u0026gt;\u0026lt;/furo-button\u0026gt; \u0026lt;my-view ƒ-close=\u0026#34;--closeView\u0026#34;\u0026gt;\u0026lt;/my-view\u0026gt; \u0026lt;data-component ƒ-save=\u0026#34;--closeView\u0026#34;\u0026gt;\u0026lt;/data-component\u0026gt;   good example\n1 2 3  \u0026lt;furo-button @-click=\u0026#34;--closeButtonClicked\u0026#34;\u0026gt;\u0026lt;/furo-button\u0026gt; \u0026lt;my-view ƒ-close=\u0026#34;--closeButtonClicked\u0026#34;\u0026gt;\u0026lt;/my-view\u0026gt; \u0026lt;data-component ƒ-save=\u0026#34;--closeButtonClicked\u0026#34;\u0026gt;\u0026lt;/data-component\u0026gt;   It is a subtile but relevant difference between this two examles.\nUse event delegation #  When you use a set of components, you don\u0026rsquo;t have to wire every single component to the appropriate target. Use event delegation whenever possible. It is faster and easier to read.\nwithout event delegation\n1 2 3 4 5 6 7 8  \u0026lt;div \u0026gt; \u0026lt;mole-hole key=\u0026#34;a\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;s\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;d\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;f\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;g\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;w\u0026#34; @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;/div\u0026gt;    with event delegation\n1 2 3 4 5 6 7 8  \u0026lt;div @-closed=\u0026#34;--moleClosed\u0026#34; @-continue=\u0026#34;--continue\u0026#34; @-miss=\u0026#34;--missed\u0026#34; @-whack=\u0026#34;--whacked\u0026#34;\u0026gt; \u0026lt;mole-hole key=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;s\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;d\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;f\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;g\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;mole-hole key=\u0026#34;w\u0026#34;\u0026gt;\u0026lt;/mole-hole\u0026gt; \u0026lt;/div\u0026gt;    "});index.add({'id':9,'href':'/docs/fbp-debugging/','title':"Debugging",'section':"Docs",'content':"Debugging strategies #  You can use the debugging tools you always used for web development. The eventListeners from furo-fbp are the same eventListeners you have had before.\n img[src*=\"#max\"]{max-width:600px} $0 is the selected element from the elements tab.\n  getEventListeners($0) shows you the attached eventListeners\n Show the fbp listeners on a host #  Use $0.__FBPEventlistener to show all listeners on the host component\n Show the wires on a host #  Use $0.__wirebundle to show all registered wires.\n  Keep in mind that wires without receivers will not show in this list.\n Debugging a single wire #  To debug a single wire write $0._FBPDebug(\u0026quot;--markdown\u0026quot;).\n  Every time this wire triggers, you will see the following information in your console.\n Tracing #  To trace all wires in a host use $0._FBPTraceWires().\n  This will log every triggering wire to the console. In most of the cases, the problems you have to solve, are caused by typos in wire names.\n "});index.add({'id':10,'href':'/docs/fbp-lifecycle/','title':"Lifecycle",'section':"Docs",'content':"FBP Lifecycle #  _FBPReady() #  _FBPReady() is called, when the wires are registered and the components are able to receive wire data. This is also the earliest point to enable the tracing.\n1 2 3 4 5 6 7 8 9  class MyComponent extends FBP(LitElement) { // trace all wires  _FBPReady(){ this._FBPTraceWires(); super._FBPReady(); } } window.customElements.define(\u0026#39;my-component\u0026#39;, MyComponent);   The \u0026ndash;FBPready magic wire #  The wire --FBPready is also triggered when your component is ready.\n"});index.add({'id':11,'href':'/docs/visual-analysis/','title':"Visual analysis",'section':"Docs",'content':"Visual Application Analysis #  Inspect your application logic visually by using viz.\nStarting a viz.furo.pro session #  Start from body #  To start a viz session just type viz() in your browser console. This will open and connect your current browser tab to viz.furo.pro where you can see your application flow. By a double click on a component, viz will request the component from your application and render it.\nStart from a particular component #  Instead of clicking down until you have reached the component you are interested in, you can start viz with a reference to your component.\n example with chrome*   Use the picker to select an element in the page it will be highlighted in the element view and a reference is available with $0 start viz with a reference to the element by typing viz($0)  Examples #   viz started from root\n component: app-shell\n A wire which has no connection to target will be displayed as a red circle\nHow to read the flow graph #  If you are familiar with fbp, you should not have any problem to read the graph.\n  The boxes represent the used components. The name of the component is on the top left (furo-app-flow)\n Boxes with dashed lines have a comment in the source. Hover on the box to read the comment    The blue lines are the wires.\n Hover on them to read the wire name, like --unauthorized.    The small blue boxes with an @- are the catched events.\n Hover on them to read the used name and more.    The small green boxes with an ƒ- are the triggerer for the methods of the component.\n  The small black boxes are attributes without a value assignment.\n These are often boolean flags like hidden or readonly which are setted.    The small orange boxes are string attributes of the component which are setted.\n Hover on them to read the setted string.    The orange dots are indicating a wire from nowhere or a wire which was triggered from the source (like this._FBPTriggerWire(\u0026quot;\u0026ndash;dataReceived\u0026quot;,data)) or from outside (like \u0026ndash;pageEntered from furo-pages).\n If you trigger a wire from the source and use the prefix |-- on the wire, the dot will turn green    The red dots are indicating a wire which goes nowhere or a wire which is cathced in the source (like this._FBPAddWireHook(\u0026quot;\u0026ndash;wireName\u0026quot;,(e)=\u0026gt;{ \u0026hellip; });\n  Keyboard shortcuts #   f on the buttons toggles the fullscreen mode. Press \u0026ldquo;esc\u0026rdquo; to get back. ctrl v or cmd v renders the clipboard content. Do not forget to allow your browser to accept the clipboard content. arrow-left, arrow-right ◀, ▶ re renders the last pasted content. Backspace removes the current view.  Mouse controls #   scroll down zooms the flow in. scroll up zooms out. moving the mouse with mousedown pans the flow.  Touch controls #   pinch in zooms the flow in. pinch out zooms the flow out. paning (with 2 fingers) pans the flow.  "});index.add({'id':12,'href':'/docs/cred-morrison/','title':"Credits",'section':"Docs",'content':"J. Paul Rodker Morrison #  Furo FBP was inspired by the work of Paul Morrison. You will find a lot of interesting material on his page.\n  Flow-Based Programming  J. Paul Rodker Morrison  Some words from the discoverer of Flow Based Programming #   – Just as in the preparation and consumption of food there are the two roles of cook and diner, in FBP application development there are two distinct roles: the component builder and the component user or application designer. The component builder decides the specification of a component, which must also include constraints on the format of incoming data IPs (including option IPs) and the format of output IPs. The specification should not describe the internal logic of the component, although attributes sometimes “leak” from internal to external (restrictions on use are usually of this type). The application designer builds applications using already existing components, or, where satisfactory ones do not exist, s/he will specify a new component, and then see about getting it built. Component designers and users may of course be the same people, but there are two very different types of skill involved. This is somewhat like the designer of a recent popular game, who admitted he was not particularly fast at solving it - his skill was in designing games, not in playing them. The separation between makers and users is so widespread in real life that we don’t pay any attention to it unless it breaks down. In industry, as Wayne Stevens points out, we take for granted the idea that airplane builders do not build their own chairs - they subcontract them to chair manufacturers, who in turn subcontract the cloth to textile manufacturers and so on. In contrast, the world of conventional programming is as if every builder designed his own nails, lumber and dry-wall from scratch. Talk about “reinventing the wheel” - in conventional application development we reinvent the rubber, the nuts and bolts, and even the shape of the wheel! [van Norstand Rheinhold, Flow based Programming (1994). Page 53]  "});})();