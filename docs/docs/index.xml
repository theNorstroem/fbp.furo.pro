<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on フロー FBP</title>
    <link>http://fbp.furo.pro/docs/</link>
    <description>Recent content in Docs on フロー FBP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Apr 2017 14:02:04 +0200</lastBuildDate><atom:link href="http://fbp.furo.pro/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installlation</title>
      <link>http://fbp.furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/installation/</guid>
      <description>Installation #  You can use furo FBP directly in your HTML documents or within your own web-components.
From CDN #  FBP and eclipsefuro-web in HTML without installation #  You can use furo-fbp and the furo-web-components without a direct installation by using the precompiled variant of the furo web components.
This is the simplest way to get up and running.
1 2 3 4 5 6  &amp;lt;script&amp;gt; import(&amp;#34;https://cdn.</description>
    </item>
    
    <item>
      <title>Precompiled</title>
      <link>http://fbp.furo.pro/docs/precompiled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/precompiled/</guid>
      <description>@furo/precompiled #  The @furo/precompiled package is for those who want to use the furo componetnt directly in HTML. There is no build step needed. It is a convenient way to use the components to prototype some ideas or just play around with FBP without a complex installation procedure. When you know that your ideas work, transfer them 1:1 to a web component, so others can install, use and extend them.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://fbp.furo.pro/docs/fbp-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-basics/</guid>
      <description>Getting Started #  Write your applications like you make the concept for your application. Normaly you draw a few components and some arrows to connect the components, to describe your intention. Why you don’t do the same to write your app or component? Use existing web-components and wire them to build up your application.
Furo FBP 101 #  In furo-FBP you connect events from one component to methods of anohter component.</description>
    </item>
    
    <item>
      <title>Wire Data</title>
      <link>http://fbp.furo.pro/docs/fbp-wires-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-wires-data/</guid>
      <description>Data on wires #  Wires are not limited to triggering something, they also transport information.
Note
By default the content of EVENT.detail is passed to the target. If an event does not have a detail property, the receiver will get a undefined.
 Passing useful data to target #       The color picker dispatches a value-changed event, with the color as payload.
Send the complete event instead of event.</description>
    </item>
    
    <item>
      <title>Compatibility</title>
      <link>http://fbp.furo.pro/docs/fbp-wires-more/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-wires-more/</guid>
      <description>Working with suboptimal components #  Some components that you may want or have to use are not dispatching events or receiving data by methods. Therefore, furo FBP has some features to work with them too.
Setting a member value #  To set a value of a component you use can be done with the ƒ-.property.
 A click counter   Note, a property is not an attribute.</description>
    </item>
    
    <item>
      <title>Custom Events</title>
      <link>http://fbp.furo.pro/docs/fbp-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-events/</guid>
      <description>Fireing custom events #  Web Components use events to communicate state changes up the DOM tree to parent elements.
Furo also provides a notation for events which allows you to specify events in a declarative manner. This is very useful when you want to trigger a event with a more specific name then the originating event has.
*On the first view, it does not make sense to rename events. Take a look at the example below to get a better understanding.</description>
    </item>
    
    <item>
      <title>Script interaction</title>
      <link>http://fbp.furo.pro/docs/fbp-scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-scripting/</guid>
      <description>Interaction with javascript #  The wires can be hooked and triggered from the script part of your component. This also comes very handy when you are writing tests.
Trigger a wire imperatively #  To trigger a wire from the javascript part of your component, call the _FBPTriggerWire method.
You can also trigger the wire in the constructor, in this case the wire will be queued until the flow is parsed and ready.</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>http://fbp.furo.pro/docs/fbp-scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-scope/</guid>
      <description>Scope #  The scope of a FBP program is COMPONENT SCOPE. All wires inside a component can be used.
Parked data is set on the component.
Everything inside of a Template tag is not accessible through the wires.</description>
    </item>
    
    <item>
      <title>Best Practice</title>
      <link>http://fbp.furo.pro/docs/fbp-bestpractice/</link>
      <pubDate>Mon, 17 Apr 2017 14:02:04 +0200</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-bestpractice/</guid>
      <description>Best Practice #  The best practices are a result from the feedback of our users, thanks to them.
Feel free to give us your feedback.
Wire and event naming #  In fact you can use any string to name wires, but most of the users are using two dashes in front of the wire name and for the name they use camelCase notation.
For the events they use the dashed-case notation, because you can not write @-camelCase.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>http://fbp.furo.pro/docs/fbp-debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-debugging/</guid>
      <description>Debugging strategies #  You can use the debugging tools you always used for web development. The eventListeners from furo-fbp are the same eventListeners you have had before.
 img[src*=&#34;#max&#34;]{max-width:600px} $0 is the selected element from the elements tab.
  getEventListeners($0) shows you the attached eventListeners
 Show the fbp listeners on a host #  Use $0.__FBPEventlistener to show all listeners on the host component
 Show the wires on a host #  Use $0.</description>
    </item>
    
    <item>
      <title>Lifecycle</title>
      <link>http://fbp.furo.pro/docs/fbp-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/fbp-lifecycle/</guid>
      <description>FBP Lifecycle #  _FBPReady() #  _FBPReady() is called, when the wires are registered and the components are able to receive wire data.
1 2 3 4 5 6 7 8 9 10 11  class MyComponent extends FBP(LitElement) { /** * flow is ready lifecycle method */ _FBPReady() { super._FBPReady() this._FBPTraceWires() } } window.customElements.define(&amp;#39;my-component&amp;#39;, MyComponent);   The |&amp;ndash;FBPready magic wire #  The wire |--FBPready is triggered when your component is ready.</description>
    </item>
    
    <item>
      <title>Visual analysis</title>
      <link>http://fbp.furo.pro/docs/visual-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/visual-analysis/</guid>
      <description>Visual Application Analysis #  Inspect your application logic visually by using viz.
Starting a viz.furo.pro session #  Start from body #  To start a viz session just type viz() in your browser console. This will open and connect your current browser tab to viz.furo.pro where you can see your application flow. By a double click on a component, viz will request the component from your application and render it.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>http://fbp.furo.pro/docs/cred-morrison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fbp.furo.pro/docs/cred-morrison/</guid>
      <description>J. Paul Rodker Morrison #  Furo FBP was inspired by the work of Paul Morrison. You will find a lot of interesting material on his page.
  Flow-Based Programming  J. Paul Rodker Morrison  Some words from the discoverer of Flow Based Programming #   – Just as in the preparation and consumption of food there are the two roles of cook and diner, in FBP application development there are two distinct roles: the component builder and the component user or application designer.</description>
    </item>
    
  </channel>
</rss>
